// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: client/v1/client.proto

package clientv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/deeploop-io/deeploop-protocol/genproto/client/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DeeploopServiceName is the fully-qualified name of the DeeploopService service.
	DeeploopServiceName = "deeploop.client.v1.DeeploopService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DeeploopServiceMessageLoopProcedure is the fully-qualified name of the DeeploopService's
	// MessageLoop RPC.
	DeeploopServiceMessageLoopProcedure = "/deeploop.client.v1.DeeploopService/MessageLoop"
	// DeeploopServiceMessagePushProcedure is the fully-qualified name of the DeeploopService's
	// MessagePush RPC.
	DeeploopServiceMessagePushProcedure = "/deeploop.client.v1.DeeploopService/MessagePush"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	deeploopServiceServiceDescriptor           = v1.File_client_v1_client_proto.Services().ByName("DeeploopService")
	deeploopServiceMessageLoopMethodDescriptor = deeploopServiceServiceDescriptor.Methods().ByName("MessageLoop")
	deeploopServiceMessagePushMethodDescriptor = deeploopServiceServiceDescriptor.Methods().ByName("MessagePush")
)

// DeeploopServiceClient is a client for the deeploop.client.v1.DeeploopService service.
type DeeploopServiceClient interface {
	// 核心双向数据流
	MessageLoop(context.Context) *connect.BidiStreamForClient[v1.InboundMessage, v1.OutboundMessage]
	MessagePush(context.Context, *connect.Request[v1.Connect]) (*connect.ServerStreamForClient[v1.PushMessage], error)
}

// NewDeeploopServiceClient constructs a client for the deeploop.client.v1.DeeploopService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDeeploopServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DeeploopServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &deeploopServiceClient{
		messageLoop: connect.NewClient[v1.InboundMessage, v1.OutboundMessage](
			httpClient,
			baseURL+DeeploopServiceMessageLoopProcedure,
			connect.WithSchema(deeploopServiceMessageLoopMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		messagePush: connect.NewClient[v1.Connect, v1.PushMessage](
			httpClient,
			baseURL+DeeploopServiceMessagePushProcedure,
			connect.WithSchema(deeploopServiceMessagePushMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// deeploopServiceClient implements DeeploopServiceClient.
type deeploopServiceClient struct {
	messageLoop *connect.Client[v1.InboundMessage, v1.OutboundMessage]
	messagePush *connect.Client[v1.Connect, v1.PushMessage]
}

// MessageLoop calls deeploop.client.v1.DeeploopService.MessageLoop.
func (c *deeploopServiceClient) MessageLoop(ctx context.Context) *connect.BidiStreamForClient[v1.InboundMessage, v1.OutboundMessage] {
	return c.messageLoop.CallBidiStream(ctx)
}

// MessagePush calls deeploop.client.v1.DeeploopService.MessagePush.
func (c *deeploopServiceClient) MessagePush(ctx context.Context, req *connect.Request[v1.Connect]) (*connect.ServerStreamForClient[v1.PushMessage], error) {
	return c.messagePush.CallServerStream(ctx, req)
}

// DeeploopServiceHandler is an implementation of the deeploop.client.v1.DeeploopService service.
type DeeploopServiceHandler interface {
	// 核心双向数据流
	MessageLoop(context.Context, *connect.BidiStream[v1.InboundMessage, v1.OutboundMessage]) error
	MessagePush(context.Context, *connect.Request[v1.Connect], *connect.ServerStream[v1.PushMessage]) error
}

// NewDeeploopServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDeeploopServiceHandler(svc DeeploopServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	deeploopServiceMessageLoopHandler := connect.NewBidiStreamHandler(
		DeeploopServiceMessageLoopProcedure,
		svc.MessageLoop,
		connect.WithSchema(deeploopServiceMessageLoopMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deeploopServiceMessagePushHandler := connect.NewServerStreamHandler(
		DeeploopServiceMessagePushProcedure,
		svc.MessagePush,
		connect.WithSchema(deeploopServiceMessagePushMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/deeploop.client.v1.DeeploopService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DeeploopServiceMessageLoopProcedure:
			deeploopServiceMessageLoopHandler.ServeHTTP(w, r)
		case DeeploopServiceMessagePushProcedure:
			deeploopServiceMessagePushHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDeeploopServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDeeploopServiceHandler struct{}

func (UnimplementedDeeploopServiceHandler) MessageLoop(context.Context, *connect.BidiStream[v1.InboundMessage, v1.OutboundMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("deeploop.client.v1.DeeploopService.MessageLoop is not implemented"))
}

func (UnimplementedDeeploopServiceHandler) MessagePush(context.Context, *connect.Request[v1.Connect], *connect.ServerStream[v1.PushMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("deeploop.client.v1.DeeploopService.MessagePush is not implemented"))
}
