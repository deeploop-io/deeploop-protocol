// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: client/v1/client.proto

package clientv1

import (
	v1 "github.com/deeploop-io/deeploop-protocol/genproto/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Connect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscriptions []*Subscription `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *Connect) Reset() {
	*x = Connect{}
	mi := &file_client_v1_client_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connect) ProtoMessage() {}

func (x *Connect) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connect.ProtoReflect.Descriptor instead.
func (*Connect) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{0}
}

func (x *Connect) GetSubscriptions() []*Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type PushMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Headers map[string]string `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are assignable to Body:
	//
	//	*PushMessage_Connected
	//	*PushMessage_Ping
	//	*PushMessage_Publication
	Body isPushMessage_Body `protobuf_oneof:"body"`
}

func (x *PushMessage) Reset() {
	*x = PushMessage{}
	mi := &file_client_v1_client_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushMessage) ProtoMessage() {}

func (x *PushMessage) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushMessage.ProtoReflect.Descriptor instead.
func (*PushMessage) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{1}
}

func (x *PushMessage) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PushMessage) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (m *PushMessage) GetBody() isPushMessage_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *PushMessage) GetConnected() *Connected {
	if x, ok := x.GetBody().(*PushMessage_Connected); ok {
		return x.Connected
	}
	return nil
}

func (x *PushMessage) GetPing() *Ping {
	if x, ok := x.GetBody().(*PushMessage_Ping); ok {
		return x.Ping
	}
	return nil
}

func (x *PushMessage) GetPublication() *Publication {
	if x, ok := x.GetBody().(*PushMessage_Publication); ok {
		return x.Publication
	}
	return nil
}

type isPushMessage_Body interface {
	isPushMessage_Body()
}

type PushMessage_Connected struct {
	Connected *Connected `protobuf:"bytes,3,opt,name=connected,proto3,oneof"`
}

type PushMessage_Ping struct {
	Ping *Ping `protobuf:"bytes,4,opt,name=ping,proto3,oneof"`
}

type PushMessage_Publication struct {
	Publication *Publication `protobuf:"bytes,11,opt,name=publication,proto3,oneof"`
}

func (*PushMessage_Connected) isPushMessage_Body() {}

func (*PushMessage_Ping) isPushMessage_Body() {}

func (*PushMessage_Publication) isPushMessage_Body() {}

type InboundMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Headers map[string]string `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are assignable to Body:
	//
	//	*InboundMessage_RpcRequest
	//	*InboundMessage_Subscribe
	//	*InboundMessage_Unsubscribe
	//	*InboundMessage_Ping
	//	*InboundMessage_Pong
	//	*InboundMessage_Publish
	//	*InboundMessage_Poll
	Body isInboundMessage_Body `protobuf_oneof:"body"`
}

func (x *InboundMessage) Reset() {
	*x = InboundMessage{}
	mi := &file_client_v1_client_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InboundMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboundMessage) ProtoMessage() {}

func (x *InboundMessage) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboundMessage.ProtoReflect.Descriptor instead.
func (*InboundMessage) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{2}
}

func (x *InboundMessage) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InboundMessage) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (m *InboundMessage) GetBody() isInboundMessage_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *InboundMessage) GetRpcRequest() *RPCRequest {
	if x, ok := x.GetBody().(*InboundMessage_RpcRequest); ok {
		return x.RpcRequest
	}
	return nil
}

func (x *InboundMessage) GetSubscribe() *Subscribe {
	if x, ok := x.GetBody().(*InboundMessage_Subscribe); ok {
		return x.Subscribe
	}
	return nil
}

func (x *InboundMessage) GetUnsubscribe() *Unsubscribe {
	if x, ok := x.GetBody().(*InboundMessage_Unsubscribe); ok {
		return x.Unsubscribe
	}
	return nil
}

func (x *InboundMessage) GetPing() *Ping {
	if x, ok := x.GetBody().(*InboundMessage_Ping); ok {
		return x.Ping
	}
	return nil
}

func (x *InboundMessage) GetPong() *Pong {
	if x, ok := x.GetBody().(*InboundMessage_Pong); ok {
		return x.Pong
	}
	return nil
}

func (x *InboundMessage) GetPublish() *Publish {
	if x, ok := x.GetBody().(*InboundMessage_Publish); ok {
		return x.Publish
	}
	return nil
}

func (x *InboundMessage) GetPoll() *Poll {
	if x, ok := x.GetBody().(*InboundMessage_Poll); ok {
		return x.Poll
	}
	return nil
}

type isInboundMessage_Body interface {
	isInboundMessage_Body()
}

type InboundMessage_RpcRequest struct {
	RpcRequest *RPCRequest `protobuf:"bytes,5,opt,name=rpc_request,json=rpcRequest,proto3,oneof"`
}

type InboundMessage_Subscribe struct {
	Subscribe *Subscribe `protobuf:"bytes,6,opt,name=subscribe,proto3,oneof"`
}

type InboundMessage_Unsubscribe struct {
	Unsubscribe *Unsubscribe `protobuf:"bytes,7,opt,name=unsubscribe,proto3,oneof"`
}

type InboundMessage_Ping struct {
	Ping *Ping `protobuf:"bytes,8,opt,name=ping,proto3,oneof"`
}

type InboundMessage_Pong struct {
	Pong *Pong `protobuf:"bytes,9,opt,name=pong,proto3,oneof"`
}

type InboundMessage_Publish struct {
	Publish *Publish `protobuf:"bytes,10,opt,name=publish,proto3,oneof"`
}

type InboundMessage_Poll struct {
	Poll *Poll `protobuf:"bytes,11,opt,name=poll,proto3,oneof"`
}

func (*InboundMessage_RpcRequest) isInboundMessage_Body() {}

func (*InboundMessage_Subscribe) isInboundMessage_Body() {}

func (*InboundMessage_Unsubscribe) isInboundMessage_Body() {}

func (*InboundMessage_Ping) isInboundMessage_Body() {}

func (*InboundMessage_Pong) isInboundMessage_Body() {}

func (*InboundMessage_Publish) isInboundMessage_Body() {}

func (*InboundMessage_Poll) isInboundMessage_Body() {}

type OutboundMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Headers map[string]string `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are assignable to Body:
	//
	//	*OutboundMessage_Error
	//	*OutboundMessage_Connected
	//	*OutboundMessage_RpcReply
	//	*OutboundMessage_SubscribeAck
	//	*OutboundMessage_UnsubscribeAck
	//	*OutboundMessage_Ping
	//	*OutboundMessage_Pong
	//	*OutboundMessage_Publication
	//	*OutboundMessage_PublishAck
	Body isOutboundMessage_Body `protobuf_oneof:"body"`
}

func (x *OutboundMessage) Reset() {
	*x = OutboundMessage{}
	mi := &file_client_v1_client_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutboundMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutboundMessage) ProtoMessage() {}

func (x *OutboundMessage) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutboundMessage.ProtoReflect.Descriptor instead.
func (*OutboundMessage) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{3}
}

func (x *OutboundMessage) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OutboundMessage) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (m *OutboundMessage) GetBody() isOutboundMessage_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *OutboundMessage) GetError() *v1.Error {
	if x, ok := x.GetBody().(*OutboundMessage_Error); ok {
		return x.Error
	}
	return nil
}

func (x *OutboundMessage) GetConnected() *Connected {
	if x, ok := x.GetBody().(*OutboundMessage_Connected); ok {
		return x.Connected
	}
	return nil
}

func (x *OutboundMessage) GetRpcReply() *RPCReply {
	if x, ok := x.GetBody().(*OutboundMessage_RpcReply); ok {
		return x.RpcReply
	}
	return nil
}

func (x *OutboundMessage) GetSubscribeAck() *SubscribeAck {
	if x, ok := x.GetBody().(*OutboundMessage_SubscribeAck); ok {
		return x.SubscribeAck
	}
	return nil
}

func (x *OutboundMessage) GetUnsubscribeAck() *UnsubscribeAck {
	if x, ok := x.GetBody().(*OutboundMessage_UnsubscribeAck); ok {
		return x.UnsubscribeAck
	}
	return nil
}

func (x *OutboundMessage) GetPing() *Ping {
	if x, ok := x.GetBody().(*OutboundMessage_Ping); ok {
		return x.Ping
	}
	return nil
}

func (x *OutboundMessage) GetPong() *Pong {
	if x, ok := x.GetBody().(*OutboundMessage_Pong); ok {
		return x.Pong
	}
	return nil
}

func (x *OutboundMessage) GetPublication() *Publication {
	if x, ok := x.GetBody().(*OutboundMessage_Publication); ok {
		return x.Publication
	}
	return nil
}

func (x *OutboundMessage) GetPublishAck() *PublishAck {
	if x, ok := x.GetBody().(*OutboundMessage_PublishAck); ok {
		return x.PublishAck
	}
	return nil
}

type isOutboundMessage_Body interface {
	isOutboundMessage_Body()
}

type OutboundMessage_Error struct {
	Error *v1.Error `protobuf:"bytes,4,opt,name=error,proto3,oneof"`
}

type OutboundMessage_Connected struct {
	Connected *Connected `protobuf:"bytes,5,opt,name=connected,proto3,oneof"`
}

type OutboundMessage_RpcReply struct {
	RpcReply *RPCReply `protobuf:"bytes,6,opt,name=rpc_reply,json=rpcReply,proto3,oneof"`
}

type OutboundMessage_SubscribeAck struct {
	SubscribeAck *SubscribeAck `protobuf:"bytes,7,opt,name=subscribe_ack,json=subscribeAck,proto3,oneof"`
}

type OutboundMessage_UnsubscribeAck struct {
	UnsubscribeAck *UnsubscribeAck `protobuf:"bytes,8,opt,name=unsubscribe_ack,json=unsubscribeAck,proto3,oneof"`
}

type OutboundMessage_Ping struct {
	Ping *Ping `protobuf:"bytes,9,opt,name=ping,proto3,oneof"`
}

type OutboundMessage_Pong struct {
	Pong *Pong `protobuf:"bytes,10,opt,name=pong,proto3,oneof"`
}

type OutboundMessage_Publication struct {
	Publication *Publication `protobuf:"bytes,11,opt,name=publication,proto3,oneof"`
}

type OutboundMessage_PublishAck struct {
	PublishAck *PublishAck `protobuf:"bytes,12,opt,name=publish_ack,json=publishAck,proto3,oneof"`
}

func (*OutboundMessage_Error) isOutboundMessage_Body() {}

func (*OutboundMessage_Connected) isOutboundMessage_Body() {}

func (*OutboundMessage_RpcReply) isOutboundMessage_Body() {}

func (*OutboundMessage_SubscribeAck) isOutboundMessage_Body() {}

func (*OutboundMessage_UnsubscribeAck) isOutboundMessage_Body() {}

func (*OutboundMessage_Ping) isOutboundMessage_Body() {}

func (*OutboundMessage_Pong) isOutboundMessage_Body() {}

func (*OutboundMessage_Publication) isOutboundMessage_Body() {}

func (*OutboundMessage_PublishAck) isOutboundMessage_Body() {}

type RPCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic    string               `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Metadata *RPCRequest_Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Payload  []byte               `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *RPCRequest) Reset() {
	*x = RPCRequest{}
	mi := &file_client_v1_client_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RPCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCRequest) ProtoMessage() {}

func (x *RPCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCRequest.ProtoReflect.Descriptor instead.
func (*RPCRequest) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{4}
}

func (x *RPCRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *RPCRequest) GetMetadata() *RPCRequest_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RPCRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type RPCReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   *v1.Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Payload []byte    `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *RPCReply) Reset() {
	*x = RPCReply{}
	mi := &file_client_v1_client_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RPCReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCReply) ProtoMessage() {}

func (x *RPCReply) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCReply.ProtoReflect.Descriptor instead.
func (*RPCReply) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{5}
}

func (x *RPCReply) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RPCReply) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type Poll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic  string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *Poll) Reset() {
	*x = Poll{}
	mi := &file_client_v1_client_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Poll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Poll) ProtoMessage() {}

func (x *Poll) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Poll.ProtoReflect.Descriptor instead.
func (*Poll) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{6}
}

func (x *Poll) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Poll) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type Publication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic     string                 `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Qos       v1.QoS                 `protobuf:"varint,2,opt,name=qos,proto3,enum=deeploop.common.v1.QoS" json:"qos,omitempty"`
	Envelopes []*Publication_Message `protobuf:"bytes,3,rep,name=envelopes,proto3" json:"envelopes,omitempty"`
}

func (x *Publication) Reset() {
	*x = Publication{}
	mi := &file_client_v1_client_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Publication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Publication) ProtoMessage() {}

func (x *Publication) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Publication.ProtoReflect.Descriptor instead.
func (*Publication) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{7}
}

func (x *Publication) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Publication) GetQos() v1.QoS {
	if x != nil {
		return x.Qos
	}
	return v1.QoS(0)
}

func (x *Publication) GetEnvelopes() []*Publication_Message {
	if x != nil {
		return x.Envelopes
	}
	return nil
}

type Connected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId     uint64          `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Subscriptions []*Subscription `protobuf:"bytes,2,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	Publications  []*Publication  `protobuf:"bytes,3,rep,name=publications,proto3" json:"publications,omitempty"`
}

func (x *Connected) Reset() {
	*x = Connected{}
	mi := &file_client_v1_client_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connected) ProtoMessage() {}

func (x *Connected) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connected.ProtoReflect.Descriptor instead.
func (*Connected) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{8}
}

func (x *Connected) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *Connected) GetSubscriptions() []*Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *Connected) GetPublications() []*Publication {
	if x != nil {
		return x.Publications
	}
	return nil
}

type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	mi := &file_client_v1_client_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{9}
}

func (x *Subscription) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Subscription) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type Subscribe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscriptions []*Subscribe_Subscription `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *Subscribe) Reset() {
	*x = Subscribe{}
	mi := &file_client_v1_client_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscribe) ProtoMessage() {}

func (x *Subscribe) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscribe.ProtoReflect.Descriptor instead.
func (*Subscribe) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{10}
}

func (x *Subscribe) GetSubscriptions() []*Subscribe_Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type SubscribeAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscriptions []*SubscribeAck_Subscription `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *SubscribeAck) Reset() {
	*x = SubscribeAck{}
	mi := &file_client_v1_client_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeAck) ProtoMessage() {}

func (x *SubscribeAck) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeAck.ProtoReflect.Descriptor instead.
func (*SubscribeAck) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{11}
}

func (x *SubscribeAck) GetSubscriptions() []*SubscribeAck_Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type Unsubscribe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscriptions []*Unsubscribe_Subscription `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *Unsubscribe) Reset() {
	*x = Unsubscribe{}
	mi := &file_client_v1_client_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Unsubscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unsubscribe) ProtoMessage() {}

func (x *Unsubscribe) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unsubscribe.ProtoReflect.Descriptor instead.
func (*Unsubscribe) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{12}
}

func (x *Unsubscribe) GetSubscriptions() []*Unsubscribe_Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type UnsubscribeAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscriptions []*UnsubscribeAck_Subscription `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *UnsubscribeAck) Reset() {
	*x = UnsubscribeAck{}
	mi := &file_client_v1_client_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnsubscribeAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeAck) ProtoMessage() {}

func (x *UnsubscribeAck) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeAck.ProtoReflect.Descriptor instead.
func (*UnsubscribeAck) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{13}
}

func (x *UnsubscribeAck) GetSubscriptions() []*UnsubscribeAck_Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type RefreshSub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscriptions []*RefreshSub_Subscription `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *RefreshSub) Reset() {
	*x = RefreshSub{}
	mi := &file_client_v1_client_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshSub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshSub) ProtoMessage() {}

func (x *RefreshSub) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshSub.ProtoReflect.Descriptor instead.
func (*RefreshSub) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{14}
}

func (x *RefreshSub) GetSubscriptions() []*RefreshSub_Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ping) Reset() {
	*x = Ping{}
	mi := &file_client_v1_client_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{15}
}

type Pong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Pong) Reset() {
	*x = Pong{}
	mi := &file_client_v1_client_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pong) ProtoMessage() {}

func (x *Pong) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pong.ProtoReflect.Descriptor instead.
func (*Pong) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{16}
}

type Publish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic   string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Qos     v1.QoS `protobuf:"varint,3,opt,name=qos,proto3,enum=deeploop.common.v1.QoS" json:"qos,omitempty"` // QoS, 0-不做保证，即时推送
	Payload []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Publish) Reset() {
	*x = Publish{}
	mi := &file_client_v1_client_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Publish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Publish) ProtoMessage() {}

func (x *Publish) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Publish.ProtoReflect.Descriptor instead.
func (*Publish) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{17}
}

func (x *Publish) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Publish) GetQos() v1.QoS {
	if x != nil {
		return x.Qos
	}
	return v1.QoS(0)
}

func (x *Publish) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type PublishAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic  string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *PublishAck) Reset() {
	*x = PublishAck{}
	mi := &file_client_v1_client_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishAck) ProtoMessage() {}

func (x *PublishAck) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishAck.ProtoReflect.Descriptor instead.
func (*PublishAck) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{18}
}

func (x *PublishAck) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PublishAck) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type RPCRequest_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LbPolicy string `protobuf:"bytes,1,opt,name=lb_policy,json=lbPolicy,proto3" json:"lb_policy,omitempty"`
	LbKey    string `protobuf:"bytes,2,opt,name=lb_key,json=lbKey,proto3" json:"lb_key,omitempty"`
}

func (x *RPCRequest_Metadata) Reset() {
	*x = RPCRequest_Metadata{}
	mi := &file_client_v1_client_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RPCRequest_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCRequest_Metadata) ProtoMessage() {}

func (x *RPCRequest_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCRequest_Metadata.ProtoReflect.Descriptor instead.
func (*RPCRequest_Metadata) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{4, 0}
}

func (x *RPCRequest_Metadata) GetLbPolicy() string {
	if x != nil {
		return x.LbPolicy
	}
	return ""
}

func (x *RPCRequest_Metadata) GetLbKey() string {
	if x != nil {
		return x.LbKey
	}
	return ""
}

type Publication_Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Time    uint64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Offset  uint64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Qos     v1.QoS `protobuf:"varint,4,opt,name=qos,proto3,enum=deeploop.common.v1.QoS" json:"qos,omitempty"`
	Payload []byte `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Publication_Message) Reset() {
	*x = Publication_Message{}
	mi := &file_client_v1_client_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Publication_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Publication_Message) ProtoMessage() {}

func (x *Publication_Message) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Publication_Message.ProtoReflect.Descriptor instead.
func (*Publication_Message) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{7, 0}
}

func (x *Publication_Message) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Publication_Message) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Publication_Message) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Publication_Message) GetQos() v1.QoS {
	if x != nil {
		return x.Qos
	}
	return v1.QoS(0)
}

func (x *Publication_Message) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type Subscribe_Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *Subscribe_Subscription) Reset() {
	*x = Subscribe_Subscription{}
	mi := &file_client_v1_client_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subscribe_Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscribe_Subscription) ProtoMessage() {}

func (x *Subscribe_Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscribe_Subscription.ProtoReflect.Descriptor instead.
func (*Subscribe_Subscription) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{10, 0}
}

func (x *Subscribe_Subscription) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Subscribe_Subscription) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SubscribeAck_Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *SubscribeAck_Subscription) Reset() {
	*x = SubscribeAck_Subscription{}
	mi := &file_client_v1_client_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeAck_Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeAck_Subscription) ProtoMessage() {}

func (x *SubscribeAck_Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeAck_Subscription.ProtoReflect.Descriptor instead.
func (*SubscribeAck_Subscription) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{11, 0}
}

func (x *SubscribeAck_Subscription) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubscribeAck_Subscription) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

type Unsubscribe_Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *Unsubscribe_Subscription) Reset() {
	*x = Unsubscribe_Subscription{}
	mi := &file_client_v1_client_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Unsubscribe_Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unsubscribe_Subscription) ProtoMessage() {}

func (x *Unsubscribe_Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unsubscribe_Subscription.ProtoReflect.Descriptor instead.
func (*Unsubscribe_Subscription) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{12, 0}
}

func (x *Unsubscribe_Subscription) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

type UnsubscribeAck_Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *UnsubscribeAck_Subscription) Reset() {
	*x = UnsubscribeAck_Subscription{}
	mi := &file_client_v1_client_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnsubscribeAck_Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeAck_Subscription) ProtoMessage() {}

func (x *UnsubscribeAck_Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeAck_Subscription.ProtoReflect.Descriptor instead.
func (*UnsubscribeAck_Subscription) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{13, 0}
}

func (x *UnsubscribeAck_Subscription) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

type RefreshSub_Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *RefreshSub_Subscription) Reset() {
	*x = RefreshSub_Subscription{}
	mi := &file_client_v1_client_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshSub_Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshSub_Subscription) ProtoMessage() {}

func (x *RefreshSub_Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshSub_Subscription.ProtoReflect.Descriptor instead.
func (*RefreshSub_Subscription) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{14, 0}
}

func (x *RefreshSub_Subscription) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *RefreshSub_Subscription) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

var File_client_v1_client_proto protoreflect.FileDescriptor

var file_client_v1_client_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f,
	0x6f, 0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12,
	0x46, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xdd, 0x02, 0x0a, 0x0b, 0x50, 0x75, 0x73, 0x68,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75,
	0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2e,
	0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64,
	0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x43,
	0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xbf, 0x04, 0x0a, 0x0e, 0x49, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x65,
	0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x65, 0x65,
	0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x50, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x70,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x65,
	0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64,
	0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x70, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x65,
	0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x04,
	0x70, 0x6f, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x65,
	0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x07,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x48, 0x00, 0x52, 0x07, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x04, 0x70, 0x6f, 0x6c, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x04, 0x70, 0x6f, 0x6c, 0x6c, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xe0, 0x05, 0x0a, 0x0f, 0x4f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4a, 0x0a,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x72,
	0x70, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x50, 0x43, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x08,
	0x72, 0x70, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63,
	0x6b, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63,
	0x6b, 0x12, 0x4d, 0x0a, 0x0f, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x5f, 0x61, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x65, 0x65,
	0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x6b, 0x48, 0x00,
	0x52, 0x0e, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x6b,
	0x12, 0x2e, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67,
	0x12, 0x2e, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67,
	0x12, 0x43, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x5f, 0x61, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x65, 0x65,
	0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x63, 0x6b, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xc1, 0x01, 0x0a,
	0x0a, 0x52, 0x50, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x43, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x50, 0x43, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x1a, 0x3e, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x62, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x62, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x62, 0x4b, 0x65, 0x79,
	0x22, 0x55, 0x0a, 0x08, 0x52, 0x50, 0x43, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x65,
	0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x34, 0x0a, 0x04, 0x50, 0x6f, 0x6c, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xa2, 0x02,
	0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x29, 0x0a, 0x03, 0x71, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x52, 0x03, 0x71, 0x6f, 0x73, 0x12, 0x45,
	0x0a, 0x09, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x73, 0x1a, 0x8a, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x29, 0x0a,
	0x03, 0x71, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x65, 0x65,
	0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x6f, 0x53, 0x52, 0x03, 0x71, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x46, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3a, 0x0a, 0x0c,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x09, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x53, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64,
	0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x6b, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x34, 0x0a, 0x0c, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x22, 0x87, 0x01, 0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x52, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f,
	0x6f, 0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x24, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x8d, 0x01, 0x0a, 0x0e, 0x55,
	0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x55, 0x0a,
	0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x6b, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x24, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x9b, 0x01, 0x0a, 0x0a, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x75, 0x62, 0x12, 0x51, 0x0a, 0x0d, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x75, 0x62,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a, 0x0a, 0x0c,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x06, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67,
	0x22, 0x06, 0x0a, 0x04, 0x50, 0x6f, 0x6e, 0x67, 0x22, 0x64, 0x0a, 0x07, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x29, 0x0a, 0x03, 0x71, 0x6f, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6f, 0x53, 0x52,
	0x03, 0x71, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x3a,
	0x0a, 0x0a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0xbc, 0x01, 0x0a, 0x0f, 0x44,
	0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5a,
	0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x6f, 0x70, 0x12, 0x22, 0x2e,
	0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x23, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x4d, 0x0a, 0x0b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x75, 0x73, 0x68, 0x12, 0x1b, 0x2e, 0x64, 0x65, 0x65, 0x70,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x1a, 0x1f, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x73, 0x68,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x30, 0x01, 0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70,
	0x2d, 0x69, 0x6f, 0x2f, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x6f, 0x6f, 0x70, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_client_v1_client_proto_rawDescOnce sync.Once
	file_client_v1_client_proto_rawDescData = file_client_v1_client_proto_rawDesc
)

func file_client_v1_client_proto_rawDescGZIP() []byte {
	file_client_v1_client_proto_rawDescOnce.Do(func() {
		file_client_v1_client_proto_rawDescData = protoimpl.X.CompressGZIP(file_client_v1_client_proto_rawDescData)
	})
	return file_client_v1_client_proto_rawDescData
}

var file_client_v1_client_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_client_v1_client_proto_goTypes = []any{
	(*Connect)(nil),                     // 0: deeploop.client.v1.Connect
	(*PushMessage)(nil),                 // 1: deeploop.client.v1.PushMessage
	(*InboundMessage)(nil),              // 2: deeploop.client.v1.InboundMessage
	(*OutboundMessage)(nil),             // 3: deeploop.client.v1.OutboundMessage
	(*RPCRequest)(nil),                  // 4: deeploop.client.v1.RPCRequest
	(*RPCReply)(nil),                    // 5: deeploop.client.v1.RPCReply
	(*Poll)(nil),                        // 6: deeploop.client.v1.Poll
	(*Publication)(nil),                 // 7: deeploop.client.v1.Publication
	(*Connected)(nil),                   // 8: deeploop.client.v1.Connected
	(*Subscription)(nil),                // 9: deeploop.client.v1.Subscription
	(*Subscribe)(nil),                   // 10: deeploop.client.v1.Subscribe
	(*SubscribeAck)(nil),                // 11: deeploop.client.v1.SubscribeAck
	(*Unsubscribe)(nil),                 // 12: deeploop.client.v1.Unsubscribe
	(*UnsubscribeAck)(nil),              // 13: deeploop.client.v1.UnsubscribeAck
	(*RefreshSub)(nil),                  // 14: deeploop.client.v1.RefreshSub
	(*Ping)(nil),                        // 15: deeploop.client.v1.Ping
	(*Pong)(nil),                        // 16: deeploop.client.v1.Pong
	(*Publish)(nil),                     // 17: deeploop.client.v1.Publish
	(*PublishAck)(nil),                  // 18: deeploop.client.v1.PublishAck
	nil,                                 // 19: deeploop.client.v1.PushMessage.HeadersEntry
	nil,                                 // 20: deeploop.client.v1.InboundMessage.HeadersEntry
	nil,                                 // 21: deeploop.client.v1.OutboundMessage.HeadersEntry
	(*RPCRequest_Metadata)(nil),         // 22: deeploop.client.v1.RPCRequest.Metadata
	(*Publication_Message)(nil),         // 23: deeploop.client.v1.Publication.Message
	(*Subscribe_Subscription)(nil),      // 24: deeploop.client.v1.Subscribe.Subscription
	(*SubscribeAck_Subscription)(nil),   // 25: deeploop.client.v1.SubscribeAck.Subscription
	(*Unsubscribe_Subscription)(nil),    // 26: deeploop.client.v1.Unsubscribe.Subscription
	(*UnsubscribeAck_Subscription)(nil), // 27: deeploop.client.v1.UnsubscribeAck.Subscription
	(*RefreshSub_Subscription)(nil),     // 28: deeploop.client.v1.RefreshSub.Subscription
	(*v1.Error)(nil),                    // 29: deeploop.common.v1.Error
	(v1.QoS)(0),                         // 30: deeploop.common.v1.QoS
}
var file_client_v1_client_proto_depIdxs = []int32{
	9,  // 0: deeploop.client.v1.Connect.subscriptions:type_name -> deeploop.client.v1.Subscription
	19, // 1: deeploop.client.v1.PushMessage.headers:type_name -> deeploop.client.v1.PushMessage.HeadersEntry
	8,  // 2: deeploop.client.v1.PushMessage.connected:type_name -> deeploop.client.v1.Connected
	15, // 3: deeploop.client.v1.PushMessage.ping:type_name -> deeploop.client.v1.Ping
	7,  // 4: deeploop.client.v1.PushMessage.publication:type_name -> deeploop.client.v1.Publication
	20, // 5: deeploop.client.v1.InboundMessage.headers:type_name -> deeploop.client.v1.InboundMessage.HeadersEntry
	4,  // 6: deeploop.client.v1.InboundMessage.rpc_request:type_name -> deeploop.client.v1.RPCRequest
	10, // 7: deeploop.client.v1.InboundMessage.subscribe:type_name -> deeploop.client.v1.Subscribe
	12, // 8: deeploop.client.v1.InboundMessage.unsubscribe:type_name -> deeploop.client.v1.Unsubscribe
	15, // 9: deeploop.client.v1.InboundMessage.ping:type_name -> deeploop.client.v1.Ping
	16, // 10: deeploop.client.v1.InboundMessage.pong:type_name -> deeploop.client.v1.Pong
	17, // 11: deeploop.client.v1.InboundMessage.publish:type_name -> deeploop.client.v1.Publish
	6,  // 12: deeploop.client.v1.InboundMessage.poll:type_name -> deeploop.client.v1.Poll
	21, // 13: deeploop.client.v1.OutboundMessage.headers:type_name -> deeploop.client.v1.OutboundMessage.HeadersEntry
	29, // 14: deeploop.client.v1.OutboundMessage.error:type_name -> deeploop.common.v1.Error
	8,  // 15: deeploop.client.v1.OutboundMessage.connected:type_name -> deeploop.client.v1.Connected
	5,  // 16: deeploop.client.v1.OutboundMessage.rpc_reply:type_name -> deeploop.client.v1.RPCReply
	11, // 17: deeploop.client.v1.OutboundMessage.subscribe_ack:type_name -> deeploop.client.v1.SubscribeAck
	13, // 18: deeploop.client.v1.OutboundMessage.unsubscribe_ack:type_name -> deeploop.client.v1.UnsubscribeAck
	15, // 19: deeploop.client.v1.OutboundMessage.ping:type_name -> deeploop.client.v1.Ping
	16, // 20: deeploop.client.v1.OutboundMessage.pong:type_name -> deeploop.client.v1.Pong
	7,  // 21: deeploop.client.v1.OutboundMessage.publication:type_name -> deeploop.client.v1.Publication
	18, // 22: deeploop.client.v1.OutboundMessage.publish_ack:type_name -> deeploop.client.v1.PublishAck
	22, // 23: deeploop.client.v1.RPCRequest.metadata:type_name -> deeploop.client.v1.RPCRequest.Metadata
	29, // 24: deeploop.client.v1.RPCReply.error:type_name -> deeploop.common.v1.Error
	30, // 25: deeploop.client.v1.Publication.qos:type_name -> deeploop.common.v1.QoS
	23, // 26: deeploop.client.v1.Publication.envelopes:type_name -> deeploop.client.v1.Publication.Message
	9,  // 27: deeploop.client.v1.Connected.subscriptions:type_name -> deeploop.client.v1.Subscription
	7,  // 28: deeploop.client.v1.Connected.publications:type_name -> deeploop.client.v1.Publication
	24, // 29: deeploop.client.v1.Subscribe.subscriptions:type_name -> deeploop.client.v1.Subscribe.Subscription
	25, // 30: deeploop.client.v1.SubscribeAck.subscriptions:type_name -> deeploop.client.v1.SubscribeAck.Subscription
	26, // 31: deeploop.client.v1.Unsubscribe.subscriptions:type_name -> deeploop.client.v1.Unsubscribe.Subscription
	27, // 32: deeploop.client.v1.UnsubscribeAck.subscriptions:type_name -> deeploop.client.v1.UnsubscribeAck.Subscription
	28, // 33: deeploop.client.v1.RefreshSub.subscriptions:type_name -> deeploop.client.v1.RefreshSub.Subscription
	30, // 34: deeploop.client.v1.Publish.qos:type_name -> deeploop.common.v1.QoS
	30, // 35: deeploop.client.v1.Publication.Message.qos:type_name -> deeploop.common.v1.QoS
	2,  // 36: deeploop.client.v1.DeeploopService.MessageLoop:input_type -> deeploop.client.v1.InboundMessage
	0,  // 37: deeploop.client.v1.DeeploopService.MessagePush:input_type -> deeploop.client.v1.Connect
	3,  // 38: deeploop.client.v1.DeeploopService.MessageLoop:output_type -> deeploop.client.v1.OutboundMessage
	1,  // 39: deeploop.client.v1.DeeploopService.MessagePush:output_type -> deeploop.client.v1.PushMessage
	38, // [38:40] is the sub-list for method output_type
	36, // [36:38] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_client_v1_client_proto_init() }
func file_client_v1_client_proto_init() {
	if File_client_v1_client_proto != nil {
		return
	}
	file_client_v1_client_proto_msgTypes[1].OneofWrappers = []any{
		(*PushMessage_Connected)(nil),
		(*PushMessage_Ping)(nil),
		(*PushMessage_Publication)(nil),
	}
	file_client_v1_client_proto_msgTypes[2].OneofWrappers = []any{
		(*InboundMessage_RpcRequest)(nil),
		(*InboundMessage_Subscribe)(nil),
		(*InboundMessage_Unsubscribe)(nil),
		(*InboundMessage_Ping)(nil),
		(*InboundMessage_Pong)(nil),
		(*InboundMessage_Publish)(nil),
		(*InboundMessage_Poll)(nil),
	}
	file_client_v1_client_proto_msgTypes[3].OneofWrappers = []any{
		(*OutboundMessage_Error)(nil),
		(*OutboundMessage_Connected)(nil),
		(*OutboundMessage_RpcReply)(nil),
		(*OutboundMessage_SubscribeAck)(nil),
		(*OutboundMessage_UnsubscribeAck)(nil),
		(*OutboundMessage_Ping)(nil),
		(*OutboundMessage_Pong)(nil),
		(*OutboundMessage_Publication)(nil),
		(*OutboundMessage_PublishAck)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_client_v1_client_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_client_v1_client_proto_goTypes,
		DependencyIndexes: file_client_v1_client_proto_depIdxs,
		MessageInfos:      file_client_v1_client_proto_msgTypes,
	}.Build()
	File_client_v1_client_proto = out.File
	file_client_v1_client_proto_rawDesc = nil
	file_client_v1_client_proto_goTypes = nil
	file_client_v1_client_proto_depIdxs = nil
}
