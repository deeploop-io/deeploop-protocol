// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ssapi/v1/ssapi.proto

package ssapiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/deeploop-io/deeploop-protocol/genproto/ssapi/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServerSideServiceName is the fully-qualified name of the ServerSideService service.
	ServerSideServiceName = "deeploop.ssapi.v1.ServerSideService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServerSideServicePublishProcedure is the fully-qualified name of the ServerSideService's Publish
	// RPC.
	ServerSideServicePublishProcedure = "/deeploop.ssapi.v1.ServerSideService/Publish"
	// ServerSideServiceDisconnectProcedure is the fully-qualified name of the ServerSideService's
	// Disconnect RPC.
	ServerSideServiceDisconnectProcedure = "/deeploop.ssapi.v1.ServerSideService/Disconnect"
	// ServerSideServiceSubscribeProcedure is the fully-qualified name of the ServerSideService's
	// Subscribe RPC.
	ServerSideServiceSubscribeProcedure = "/deeploop.ssapi.v1.ServerSideService/Subscribe"
	// ServerSideServiceUnsubscribeProcedure is the fully-qualified name of the ServerSideService's
	// Unsubscribe RPC.
	ServerSideServiceUnsubscribeProcedure = "/deeploop.ssapi.v1.ServerSideService/Unsubscribe"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	serverSideServiceServiceDescriptor           = v1.File_ssapi_v1_ssapi_proto.Services().ByName("ServerSideService")
	serverSideServicePublishMethodDescriptor     = serverSideServiceServiceDescriptor.Methods().ByName("Publish")
	serverSideServiceDisconnectMethodDescriptor  = serverSideServiceServiceDescriptor.Methods().ByName("Disconnect")
	serverSideServiceSubscribeMethodDescriptor   = serverSideServiceServiceDescriptor.Methods().ByName("Subscribe")
	serverSideServiceUnsubscribeMethodDescriptor = serverSideServiceServiceDescriptor.Methods().ByName("Unsubscribe")
)

// ServerSideServiceClient is a client for the deeploop.ssapi.v1.ServerSideService service.
type ServerSideServiceClient interface {
	Publish(context.Context, *connect.Request[v1.PublishRequest]) (*connect.Response[v1.PublishReply], error)
	Disconnect(context.Context, *connect.Request[v1.DisconnectRequest]) (*connect.Response[v1.DisconnectReply], error)
	Subscribe(context.Context, *connect.Request[v1.SubscribeRequest]) (*connect.Response[v1.SubscribeReply], error)
	Unsubscribe(context.Context, *connect.Request[v1.SubscribeRequest]) (*connect.Response[v1.UnsubscribeReply], error)
}

// NewServerSideServiceClient constructs a client for the deeploop.ssapi.v1.ServerSideService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServerSideServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServerSideServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serverSideServiceClient{
		publish: connect.NewClient[v1.PublishRequest, v1.PublishReply](
			httpClient,
			baseURL+ServerSideServicePublishProcedure,
			connect.WithSchema(serverSideServicePublishMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		disconnect: connect.NewClient[v1.DisconnectRequest, v1.DisconnectReply](
			httpClient,
			baseURL+ServerSideServiceDisconnectProcedure,
			connect.WithSchema(serverSideServiceDisconnectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		subscribe: connect.NewClient[v1.SubscribeRequest, v1.SubscribeReply](
			httpClient,
			baseURL+ServerSideServiceSubscribeProcedure,
			connect.WithSchema(serverSideServiceSubscribeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		unsubscribe: connect.NewClient[v1.SubscribeRequest, v1.UnsubscribeReply](
			httpClient,
			baseURL+ServerSideServiceUnsubscribeProcedure,
			connect.WithSchema(serverSideServiceUnsubscribeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// serverSideServiceClient implements ServerSideServiceClient.
type serverSideServiceClient struct {
	publish     *connect.Client[v1.PublishRequest, v1.PublishReply]
	disconnect  *connect.Client[v1.DisconnectRequest, v1.DisconnectReply]
	subscribe   *connect.Client[v1.SubscribeRequest, v1.SubscribeReply]
	unsubscribe *connect.Client[v1.SubscribeRequest, v1.UnsubscribeReply]
}

// Publish calls deeploop.ssapi.v1.ServerSideService.Publish.
func (c *serverSideServiceClient) Publish(ctx context.Context, req *connect.Request[v1.PublishRequest]) (*connect.Response[v1.PublishReply], error) {
	return c.publish.CallUnary(ctx, req)
}

// Disconnect calls deeploop.ssapi.v1.ServerSideService.Disconnect.
func (c *serverSideServiceClient) Disconnect(ctx context.Context, req *connect.Request[v1.DisconnectRequest]) (*connect.Response[v1.DisconnectReply], error) {
	return c.disconnect.CallUnary(ctx, req)
}

// Subscribe calls deeploop.ssapi.v1.ServerSideService.Subscribe.
func (c *serverSideServiceClient) Subscribe(ctx context.Context, req *connect.Request[v1.SubscribeRequest]) (*connect.Response[v1.SubscribeReply], error) {
	return c.subscribe.CallUnary(ctx, req)
}

// Unsubscribe calls deeploop.ssapi.v1.ServerSideService.Unsubscribe.
func (c *serverSideServiceClient) Unsubscribe(ctx context.Context, req *connect.Request[v1.SubscribeRequest]) (*connect.Response[v1.UnsubscribeReply], error) {
	return c.unsubscribe.CallUnary(ctx, req)
}

// ServerSideServiceHandler is an implementation of the deeploop.ssapi.v1.ServerSideService service.
type ServerSideServiceHandler interface {
	Publish(context.Context, *connect.Request[v1.PublishRequest]) (*connect.Response[v1.PublishReply], error)
	Disconnect(context.Context, *connect.Request[v1.DisconnectRequest]) (*connect.Response[v1.DisconnectReply], error)
	Subscribe(context.Context, *connect.Request[v1.SubscribeRequest]) (*connect.Response[v1.SubscribeReply], error)
	Unsubscribe(context.Context, *connect.Request[v1.SubscribeRequest]) (*connect.Response[v1.UnsubscribeReply], error)
}

// NewServerSideServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServerSideServiceHandler(svc ServerSideServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serverSideServicePublishHandler := connect.NewUnaryHandler(
		ServerSideServicePublishProcedure,
		svc.Publish,
		connect.WithSchema(serverSideServicePublishMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serverSideServiceDisconnectHandler := connect.NewUnaryHandler(
		ServerSideServiceDisconnectProcedure,
		svc.Disconnect,
		connect.WithSchema(serverSideServiceDisconnectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serverSideServiceSubscribeHandler := connect.NewUnaryHandler(
		ServerSideServiceSubscribeProcedure,
		svc.Subscribe,
		connect.WithSchema(serverSideServiceSubscribeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serverSideServiceUnsubscribeHandler := connect.NewUnaryHandler(
		ServerSideServiceUnsubscribeProcedure,
		svc.Unsubscribe,
		connect.WithSchema(serverSideServiceUnsubscribeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/deeploop.ssapi.v1.ServerSideService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServerSideServicePublishProcedure:
			serverSideServicePublishHandler.ServeHTTP(w, r)
		case ServerSideServiceDisconnectProcedure:
			serverSideServiceDisconnectHandler.ServeHTTP(w, r)
		case ServerSideServiceSubscribeProcedure:
			serverSideServiceSubscribeHandler.ServeHTTP(w, r)
		case ServerSideServiceUnsubscribeProcedure:
			serverSideServiceUnsubscribeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServerSideServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServerSideServiceHandler struct{}

func (UnimplementedServerSideServiceHandler) Publish(context.Context, *connect.Request[v1.PublishRequest]) (*connect.Response[v1.PublishReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deeploop.ssapi.v1.ServerSideService.Publish is not implemented"))
}

func (UnimplementedServerSideServiceHandler) Disconnect(context.Context, *connect.Request[v1.DisconnectRequest]) (*connect.Response[v1.DisconnectReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deeploop.ssapi.v1.ServerSideService.Disconnect is not implemented"))
}

func (UnimplementedServerSideServiceHandler) Subscribe(context.Context, *connect.Request[v1.SubscribeRequest]) (*connect.Response[v1.SubscribeReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deeploop.ssapi.v1.ServerSideService.Subscribe is not implemented"))
}

func (UnimplementedServerSideServiceHandler) Unsubscribe(context.Context, *connect.Request[v1.SubscribeRequest]) (*connect.Response[v1.UnsubscribeReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deeploop.ssapi.v1.ServerSideService.Unsubscribe is not implemented"))
}
